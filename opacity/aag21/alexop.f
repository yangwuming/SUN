CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ALEXANDER OPACITIES   APJ,437,879,1994
C IN EACH 7 FILE FOR X = 0.0, 0.1, 0.2, 0.35, 0.5, 0.7, 0.8
C DESENDING ORDER OF Z = 0.0, 0.00001, 0.00003, 0.0001, 0.0003,
C     (15)               0.001, 0.002, 0.004, 0.01, 0.02, 0.03, 
C                        0.04, 0.06, 0.08, 0.10
C DESENDING ORDER OF LOGT  4.10 4.05 4.00 3.95 3.90 3.85 3.80 3.75
C     (23)                 3.70 3.65 3.60 3.55 3.50 3.45 3.40 3.35
C                          3.30 3.25 3.20 3.15 3.10 3.05 3.00
C ASENDING ORDER OF  LOGR -7.0 -6.5 -6.0 -5.5 -5.0 -4.5 -4.0 -3.5 
C     (17)                -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0
C      PARAMETER (NUMX=7)
C      PARAMETER (NUMT=23)
C      PARAMETER (NUMD=17)
C      PARAMETER (NUMXT=NUMT*NUMX)
CC GRID ENTRIES FOR TEMPERATURE, AND ABUNDANCE (X)
C      COMMON /GALOT/GRIDT(NUMT),GRIDX(NUMX),GRHOT3(NUMD)
CC LOS ALAMOS OPACITY
C      COMMON /ALOT/OPACITY(NUMXT,NUMD),NUMXM,NUMTM
C THIS IS THE INTERPOLATION ROUTINES FOR THE ALEXANDER LOW T OPACITY TABLES.
C CALL ALXTBL FOR THE TABLE SETUP, AND CALL AL4TH FOR THE TABLE FOR ENVELOP
C COMPOSITION IN ORDER TO SPEED UP THE GB EVOLUTION, AND, FINALLY, CALL
C YALO3D IN OPACTY ROUTINE IN THE EVOLUTION CODE. 
C
C ONE THING YOU HAVE TO REMEMBER IS THAT THE PROGRAM WILL USE ONLY ONE X
C TABLE WHEN /X-XGRID/ < 1.0E-5.  YOU MAY CHANGE THIS TOLERANCE. 
C
C THIS PROGRAM IS PARTIALLY VECTORIZED (MAINLY FOR THE INDEX TREATMENT)  SO
C THAT IT MIGHT BE SOMEWHAT UNREADABLE.  IT DOES, HOWEVER, BECOME MUCH CLEAR
C ONCE YOU FIGURE OUT HOW INDICES ARE SET UP.   THIS INDEXING WAS UNAVOIDABLE 
C FOR EFFICIENCY.
C
C                                     Y. -C. KIM
C
C P.S.  WHEN YOU IMPLEMENT THIS TO ANY EVOLUTION CODE WHICH ALREADY HAS ANY
C OF MY INTERPOLATORS, YOU MAY FIND INTPOL, FINDEX, AND YSPLIN ALREADY EXIST.
C --------------------------------------------------------------
C USING CUBIC SPLINE INTERPLOATION SCHEME.
C*** YALO3D AND ALXTBL AND ALX8TH ARE THE ROUTINES TO BE CALLED!
C    FOR GB EVOLUTION SPEED UP, ALX4TH HAVE TO BE CALLED AFTER ALXTBL ***
C      SUBROUTINE YALO3D(DL,TL,X,Z,OF,OLF,QODF,QOTF)
C      SUBROUTINE YALO2D(T,D,M1,M2,M3,O,OL,QODF,QOTF)
C      SUBROUTINE ALXTBL(ZENV)                       READ LLOT
C      SUBROUTINE YALOC                              SPLINE COEFF.
C      SUBROUTINE ALX8TH(XENV,ZENV)                  4TH TABLE GENERATOR.
C
C      SUBROUTINE FINDEX(AX,NX,X,M)                  FIND INDEX
C      SUBROUTINE INTPOL(XI,F,N,XBAR,YBAR,YBARP)     PIECEWISE INTERPOL R
C      SUBROUTINE YSPLIN(XI,C,N)                     SPLINE R
C******
C  NAMELIST              PARMIN
C  ALXTBL     ALX8TH     STARIN   HPOINT
C  YALO3D                OPACTY   OPCLAOL
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     YALO3D
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE YALO3D(DL,TL,X,OF,OLF,QODF,QOTF,mz)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL LONE, LOPOUT, LOPOUT1
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
      COMMON /OPBOUNDS/TOLOPAL95,TOLALEX,LOPOUT,LOPOUT1
      COMMON /GALOT/GRIDT(NUMT,11),GRIDX(NUMX,11),GRHOT3(NUMD,11)
      COMMON /ALOT/OPACITY(NUMXT,NUMD,11),NUMXM(11),NUMTM(11)
      COMMON /ALOT4/XENV4(11),ZENV4(11),CFORD4(NUMT,NUM4D,11),KIPM1(11)
c      COMMON /KIPMA/M1,M2,M3
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
C     DATA M1,M2,M3/1,1,1/
      LONE=.FALSE.
C
C     INDEPENDENT PARAMETER IN THE TABLE;
C     T6 = LOG10(T)
      T6=TL
C     RHOT3 = LOG10(RHO/(T/10E6)**3)
      RHOT3=DL-3.0D0*(TL-6.0D0)
C DBG ALLOW EXTRAPOLATION
      TOLALEX=0.d0
      IF(T6.LT.GRIDT(1,mz)
     +   .OR.T6.GT.GRIDT(NUMT,mz)
     +   .OR.RHOT3.LT.GRHOT3(1,mz)
     +   .OR.RHOT3.GT.GRHOT3(NUMD,mz)) THEN
         IF(T6.LT.GRIDT(1,mz)-TOLALEX
     +      .OR.T6.GT.GRIDT(NUMT,mz)+TOLALEX
     +      .OR.RHOT3.LT.GRHOT3(1,mz)-TOLALEX
     +      .OR.RHOT3.GT.GRHOT3(NUMD,mz)+TOLALEX) THEN
            RETURN 
	   ELSE
	      LOPOUT=.TRUE.
	   END IF
      ENDIF
      IF(DABS(XENV4(mz)-X).LE.1.0D-5)THEN
          M1=NUMX+1
          LONE=.TRUE.
          GO TO 131
      ENDIF
      DO 130 IM1=1,NUMX
      IF(DABS(GRIDX(IM1,mz)-X).LE.1.0D-5)THEN
         M1=IM1
         LONE=.TRUE.
         GO TO 131
      ENDIF
  130 CONTINUE
      CALL FINDEXK(GRIDX,NUMXM,X,M1,mz)
      IF(M1.LT.0)M1=-M1
      IF(M1.LE.1.AND.RHOT3.GT.-1.0D0)M1=2
      IF(M1.GE.NUMXM(mz))M1=NUMXM(mz)-1
C DBG ALLOW EXTRAPOLATION
      IF(M1.LE.0) THEN
          WRITE(ISHORT, *)' ALEXANDER ERROR IN X GRID'
          STOP
      END IF
  131 CONTINUE
      CALL FINDEXK(GRIDT,NUMTM,T6,M2,mz)
C DBG ALLOW EXTRAPOLATION
      IF(M2.LT.0) M2 = -M2
C     IF(M2.LT.0.AND.GRIDT(NUMTM).EQ.T6)M2=-M2
C      IF(M2.LT.0)THEN
C         WRITE(ISHORT, *)' ALEXANDER T OUT OF TABLE '
C         STOP
C      END IF
      CALL YALO2D(T6,RHOT3,M1,M2,M3,O0,OL0,QOD0,QOT0,mz)
      IF (LONE)THEN
C        USE ONLY ONE X TABLE
         OLF=OL0
         OF=O0
         QODI=QOD0
         QOTI=QOT0
      ELSE
C        LINEAR EXTRAPOLATION IN X
         CALL YALO2D(T6,RHOT3,M1+1,M2,M3,O1,OL1,QOD1,QOT1,mz)
         GRDNT=(X-GRIDX(M1,mz))/(GRIDX(M1+1,mz)-GRIDX(M1,mz))
         OLF=(OL1-OL0)*GRDNT+OL0
         QODI=(QOD1-QOD0)*GRDNT+QOD0
         QOTI=(QOT1-QOT0)*GRDNT+QOT0
         OF=10.0D0**OLF
      ENDIF
C     CONVERSION FROM THE DERIVERTIVE WITH CONSTANT RHOT3 TO CONSTANT RHO
      QODF=QODI
      QOTF=QOTI-3.0D0*QODF
      RETURN
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     YALO2D
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE YALO2D(T,D,M1,M2,M3,O,OL,QODF,QOTF,kz)
C     TWO DIMENSIONAL INTERPOLATION FOR OPACITY
C     AND THE DERIVTIVES.
C     M1, M2, AND M3 ARE NEAREST GRID POINT OF ABUNDANCE, TEMPERATURE,
C     AND DENSITY WE GOT AT 'GETD'.
C     O IS OPACITY.
C     OL IS DLOG(O)
C     QODF IS THE PARTIAL DERIVATIVE OF O WRT D.
C     QOTF IS THE PARTIAL DERIVATIVE OF O WRT T.
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
      COMMON /GALOT/GRIDT(NUMT,11),GRIDX(NUMX,11),GRHOT3(NUMD,11)
      COMMON /ALOT/OPACITY(NUMXT,NUMD,11),NUMXM(11),NUMTM(11)
      COMMON /ALOT4/XENV4(11),ZENV4(11),CFORD4(NUMT,NUM4D,11),KIPM1(11)
      COMMON /INTPAL/ CFORD(NUMXT,NUM4D,11),NDS(NUMXT,11),NDD(NUMXT,11)
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
      REAL*8 XT(NUMT),YTO(NUMT)
      REAL*8 AQOD(NUMT)
      INTEGER JT,IT,ITS,ITF,ndf(11)
      LOGICAL*4 LMORE
      LMORE=.TRUE.
C
C     FOR SIX GRID POINTS OF TEMPERATURE
      ITS=M2-2
      IF(ITS.LE.0)ITS=1
      ITF=M2+3
      IF(ITF.GT.NUMTM(kz))ITF=NUMTM(kz)
      IF(M1.LT.NUMX+1)THEN
         MM1=M1
      ELSE
         MM1=KIPM1(kz)
      ENDIF
      JT=0
      DO 300 IT=ITS,ITF
         INDEX1=IT+(MM1-1)*NUMTM(kz)
         NDSS=NDS(INDEX1,kz)
         IF(NDSS.NE.1) THEN
            WRITE(ISHORT, *)' 2D ALEXANDER ERROR: CHECK NDSS '
            STOP
         END IF
         NDF(kz)=NDSS+NDD(INDEX1,kz)-1
         CALL FINDEXK(GRHOT3,NDF,D,M3,kz)
         IF(M3.LT.0)THEN
C           OUT SIDE THEN  LINEAR EXTRAPOLATION
            M3=-M3
            KNOT=M3-NDSS+1
            INDEX2=4*(KNOT-1)
            DX=D-GRHOT3(M3,kz)
            IF(M1.LT.NUMX+1)THEN
               C1=CFORD(INDEX1,INDEX2+1,kz)
               C2=CFORD(INDEX1,INDEX2+2,kz)
            ELSE
               C1=CFORD4(IT,INDEX2+1,kz)
               C2=CFORD4(IT,INDEX2+2,kz)
            ENDIF
            OL0=C2*DX+C1
            QODI=C2
         ELSE
C           IN SIDE THEN  SPLINE INTERPOLATION
            KNOT=M3-NDSS+1
            INDEX2=4*(KNOT-1)
            DX=D-GRHOT3(M3,kz)
            IF(M1.LT.NUMX+1)THEN
               C1=CFORD(INDEX1,INDEX2+1,kz)
               C2=CFORD(INDEX1,INDEX2+2,kz)
               C3=CFORD(INDEX1,INDEX2+3,kz)
               C4=CFORD(INDEX1,INDEX2+4,kz)
            ELSE
               C1=CFORD4(IT,INDEX2+1,kz)
               C2=CFORD4(IT,INDEX2+2,kz)
               C3=CFORD4(IT,INDEX2+3,kz)
               C4=CFORD4(IT,INDEX2+4,kz)
            ENDIF
C           INTERPOLATION FOR OPACITY(OL) IN THE ENTRY D AND THE EACH T-GRID
C           ESTIMATES THE PARTIAL DERIVATIVE OF OL WRT D
C           EVALUATES THE INTERPOLATION VALUE IN THE SUB-RANGE WE DETERMINED.
            OL0=((C4*DX+C3)*DX+C2)*DX+C1
            QODI=(3.0D0*C4*DX+2.0D0*C3)*DX+C2
         ENDIF
         JT=JT+1
         XT(JT)=GRIDT(IT,kz)
         YTO(JT)=OL0
         AQOD(JT)=QODI
  300 CONTINUE
C DBG ALLOW EXTRAPOLATION
C      IF(XT(1).GT.T.OR.XT(JT).LT.T) THEN
C         WRITE(ISHORT, *)' ALEXANDER ERROR: EXTRAPOLATION FAILS '
C         STOP
C      END IF
C     INTERPOLATION FOR THE OPACITY IN THE ENTRY T AND D.
C     GET THE PARTIAL DERIVATIVE OF OL WRT T.
      CALL INTPOL(XT,YTO,JT,T,OL00,QOTF)
      OL=OL00
      O=10.0D0**OL
C     QOTF = D LN(O)/D LN(T)
C     FIND THE PARTIAL DERIVATIVE VALUE OF OL WRT D IN THE GIVEN T AND D
      CALL INTPOL(XT,AQOD,JT,T,QODF,QODTI)
C     QODF = D LN(O)/D LN(D)
      RETURN
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     YALO3D2
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE YALO3D2(DL,TL,X,OF,OLF,QODF,QOTF,*)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL LONE, LOPOUT, LOPOUT1
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
	COMMON /OPBOUNDS/TOLOPAL95,TOLALEX,LOPOUT,LOPOUT1
      COMMON /GALOT2/GRIDT(NUMT),GRIDX(NUMX),GRHOT3(NUMD)
      COMMON /ALOT2/OPACITY(NUMXT,NUMD),NUMXM,NUMTM
      COMMON /ALOT42/XENV4,ZENV4,CFORD4(NUMT,NUM4D),KIPM1
c      COMMON /KIPMA2/M1,M2,M3
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
C     DATA M1,M2,M3/1,1,1/
      LONE=.FALSE.
C
C     INDEPENDENT PARAMETER IN THE TABLE;
C     T6 = LOG10(T)
      T6=TL
C     RHOT3 = LN(RHO/(T/10E6)**3)
      RHOT3=DL-3.0D0*(TL-6.0D0)
C DBG ALLOW EXTRAPOLATION
      IF(T6.LT.GRIDT(1)
     +   .OR.T6.GT.GRIDT(NUMT)
     +   .OR.RHOT3.LT.GRHOT3(1)
     +   .OR.RHOT3.GT.GRHOT3(NUMD)) THEN
         IF(T6.LT.GRIDT(1)-TOLALEX
     +      .OR.T6.GT.GRIDT(NUMT)+TOLALEX
     +      .OR.RHOT3.LT.GRHOT3(1)-TOLALEX
     +      .OR.RHOT3.GT.GRHOT3(NUMD)+TOLALEX) THEN
            RETURN 1
	   ELSE
	      LOPOUT=.TRUE.
	   END IF
      ENDIF
      IF(DABS(XENV4-X).LE.1.0D-5)THEN
          M1=NUMX+1
          LONE=.TRUE.
          GO TO 131
      ENDIF
      DO 130 IM1=1,NUMX
      IF(DABS(GRIDX(IM1)-X).LE.1.0D-5)THEN
         M1=IM1
         LONE=.TRUE.
         GO TO 131
      ENDIF
  130 CONTINUE
      CALL FINDEX(GRIDX,NUMX,X,M1)
      IF(M1.LT.0)M1=-M1
      IF(M1.LE.1.AND.RHOT3.GT.-1.0D0)M1=2
      IF(M1.GE.NUMX)M1=NUMX-1
C DBG ALLOW EXTRAPOLATION
C      IF(M1.LE.0) THEN
C          WRITE(ISHORT, *)' ALEXANDER ERROR IN X GRID'
C          STOP
C      END IF
  131 CONTINUE
      CALL FINDEX(GRIDT,NUMTM,T6,M2)
	IF (M2.LT.0) M2=-M2
C DBG ALLOW EXTRAPOLATION
C      IF(M2.LT.0.AND.GRIDT(NUMTM).EQ.T6)M2=-M2
C      IF(M2.LT.0)THEN
C         WRITE(ISHORT, *)' ALEXANDER T OUT OF TABLE '
C         STOP
C      END IF
      CALL YALO2D2(T6,RHOT3,M1,M2,M3,O0,OL0,QOD0,QOT0)
      IF (LONE)THEN
C        USE ONLY ONE X TABLE
         OLF=OL0
         OF=O0
         QODI=QOD0
         QOTI=QOT0
      ELSE
C        LINEAR EXTRAPOLATION IN X
         CALL YALO2D2(T6,RHOT3,M1+1,M2,M3,O1,OL1,QOD1,QOT1)
         GRDNT=(X-GRIDX(M1))/(GRIDX(M1+1)-GRIDX(M1))
         OLF=(OL1-OL0)*GRDNT+OL0
         QODI=(QOD1-QOD0)*GRDNT+QOD0
         QOTI=(QOT1-QOT0)*GRDNT+QOT0
         OF=10.0D0**OLF
      ENDIF
C     CONVERSION FROM THE DERIVERTIVE WITH CONSTANT RHOT3 TO CONSTANT RHO
      QODF=QODI
      QOTF=QOTI-3.0D0*QODF
      RETURN
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     YALO2D2
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE YALO2D2(T,D,M1,M2,M3,O,OL,QODF,QOTF)
C     TWO DIMENSIONAL INTERPOLATION FOR OPACITY
C     AND THE DERIVTIVES.
C     M1, M2, AND M3 ARE NEAREST GRID POINT OF ABUNDANCE, TEMPERATURE,
C     AND DENSITY WE GOT AT 'GETD'.
C     O IS OPACITY.
C     OL IS DLOG(O)
C     QODF IS THE PARTIAL DERIVATIVE OF O WRT D.
C     QOTF IS THE PARTIAL DERIVATIVE OF O WRT T.
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
      COMMON /GALOT2/GRIDT(NUMT),GRIDX(NUMX),GRHOT3(NUMD)
      COMMON /ALOT2/OPACITY(NUMXT,NUMD),NUMXM,NUMTM
      COMMON /ALOT42/XENV4,ZENV4,CFORD4(NUMT,NUM4D),KIPM1
      COMMON /INTPAL2/ CFORD(NUMXT,NUM4D),NDS(NUMXT),NDD(NUMXT)
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
      REAL*8 XT(NUMT),YTO(NUMT)
      REAL*8 AQOD(NUMT)
      INTEGER JT,IT,ITS,ITF
      LOGICAL*4 LMORE
      LMORE=.TRUE.
C
C     FOR SIX GRID POINTS OF TEMPERATURE
      ITS=M2-2
      IF(ITS.LE.0)ITS=1
      ITF=M2+3
      IF(ITF.GT.NUMTM)ITF=NUMTM
      IF(M1.LT.NUMX+1)THEN
         MM1=M1
      ELSE
         MM1=KIPM1
      ENDIF
      JT=0
      DO 300 IT=ITS,ITF
         INDEX1=IT+(MM1-1)*NUMTM
         NDSS=NDS(INDEX1)
         IF(NDSS.NE.1) THEN
            WRITE(ISHORT, *)' 2D2 ALEXANDER ERROR: CHECK NDSS '
            STOP
         END IF
         NDF=NDSS+NDD(INDEX1)-1
         CALL FINDEX(GRHOT3,NDF,D,M3)
         IF(M3.LT.0)THEN
C           OUT SIDE THEN  LINEAR EXTRAPOLATION
            M3=-M3
            KNOT=M3-NDSS+1
            INDEX2=4*(KNOT-1)
            DX=D-GRHOT3(M3)
            IF(M1.LT.NUMX+1)THEN
               C1=CFORD(INDEX1,INDEX2+1)
               C2=CFORD(INDEX1,INDEX2+2)
            ELSE
               C1=CFORD4(IT,INDEX2+1)
               C2=CFORD4(IT,INDEX2+2)
            ENDIF
            OL0=C2*DX+C1
            QODI=C2
         ELSE
C           IN SIDE THEN  SPLINE INTERPOLATION
            KNOT=M3-NDSS+1
            INDEX2=4*(KNOT-1)
            DX=D-GRHOT3(M3)
            IF(M1.LT.NUMX+1)THEN
               C1=CFORD(INDEX1,INDEX2+1)
               C2=CFORD(INDEX1,INDEX2+2)
               C3=CFORD(INDEX1,INDEX2+3)
               C4=CFORD(INDEX1,INDEX2+4)
            ELSE
               C1=CFORD4(IT,INDEX2+1)
               C2=CFORD4(IT,INDEX2+2)
               C3=CFORD4(IT,INDEX2+3)
               C4=CFORD4(IT,INDEX2+4)
            ENDIF
C           INTERPOLATION FOR OPACITY(OL) IN THE ENTRY D AND THE EACH T-GRID
C           ESTIMATES THE PARTIAL DERIVATIVE OF OL WRT D
C           EVALUATES THE INTERPOLATION VALUE IN THE SUB-RANGE WE DETERMINED.
            OL0=((C4*DX+C3)*DX+C2)*DX+C1
            QODI=(3.0D0*C4*DX+2.0D0*C3)*DX+C2
         ENDIF
         JT=JT+1
         XT(JT)=GRIDT(IT)
         YTO(JT)=OL0
         AQOD(JT)=QODI
  300 CONTINUE
C DBG ALLOW EXTRAPOLATION
C      IF(XT(1).GT.T.OR.XT(JT).LT.T) THEN
C         WRITE(ISHORT, *)' ALEXANDER ERROR: EXTRAPOLATION FAILS '
C         STOP
C      END IF
C     INTERPOLATION FOR THE OPACITY IN THE ENTRY T AND D.
C     GET THE PARTIAL DERIVATIVE OF OL WRT T.
      CALL INTPOL(XT,YTO,JT,T,OL00,QOTF)
      OL=OL00
      O=10.0D0**OL
C     QOTF = D LN(O)/D LN(T)
C     FIND THE PARTIAL DERIVATIVE VALUE OF OL WRT D IN THE GIVEN T AND D
      CALL INTPOL(XT,AQOD,JT,T,QODF,QODTI)
C     QODF = D LN(O)/D LN(D)
      RETURN
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     ALXTBL
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ALXTBL
C DBG 12/95 modified to read in opacity at two different Z
      IMPLICIT REAL*8 (A-H,O-Z)
      include 'dimens'
      PARAMETER ( IOTERM = 6 )
      PARAMETER (NUMZ=16)
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      LOGICAL L2Z
      CHARACTER*80 OPECALEX(NUMX)
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
      COMMON /ALEXO/OPECALEX,IALXO
C     LOCAL ARRAY
      COMMON /GALOT/TGR(NUMT,11),XXG(NUMX,11),R0GR(NUMD,11)
c      COMMON /GALOT2/TGR2(NUMT),XXG2(NUMX),R0GR2(NUMD)
C     ALEX LOW T OPACITY
      COMMON /ALOT/CAPPA(NUMXT,NUMD,11),NUMXM(11),NUMTM(11)
c      COMMON /ALOT2/CAPPA2(NUMXT,NUMD),NUMXM2,NUMTM2
      COMMON /NEWOPAC/ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     +       ZOPAL952, ZALEX1, ZALEX2, ZKUR1, ZKUR2,  
     +       LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,L2Z 
      common/zpoint/zp(11),zpa(11),zinit
      CHARACTER*132 DUMMY
      REAL*8 X(NUMD),XSTO(NUMD,NUMT),ZZG(NUMZ)
c      DATA XXG/0.0D0,0.1D0,0.2D0,0.35D0,0.5D0,0.7D0,0.8D0/
      DATA ZZG/0.0D0, 0.00001D0, 0.00003D0, 0.0001D0, 0.0003D0,
     +         0.001D0, 0.002D0, 0.004D0, 0.01D0, 0.02D0, 0.03D0,
     +         0.04D0,0.05d0,0.06D0, 0.08D0, 0.10D0/     
C*
  1   FORMAT(A)
c   12 FORMAT(I2,I3,F6.3,F5.1,8F8.3)
c  122 FORMAT(9F8.3)
      NFMT=16
      do i=1,11
        xxg(1,i)=0.d0
        xxg(2,i)=0.1d0
        xxg(3,i)=0.2d0
        xxg(4,i)=0.35d0
        xxg(5,i)=0.5d0
        xxg(6,i)=0.7d0
        xxg(7,i)=0.8d0
        xxg(8,i)=0.9d0
      enddo

      zpa(6)=zinit
      if(zinit.lt.0.01)then
        zpa(5)=0.004
        zpa(4)=0.002
        zpa(3)=0.001
        zpa(2)=0.0003     
        zpa(1)=0.0001     
      else
       do i=1,5
        zpa(i)=zinit-(6-i)*0.001
       enddo
      endif
      do i=7,11
        zpa(i)=zinit+(i-6)*0.001
      enddo
      
      ZZ0=zpa(1)
      DO 111 IJ=2,NUMZ
         IF(ZZ0.LE.ZZG(IJ))GOTO 112
  111 CONTINUE
      IJ=NUMZ
  112 IZ0=NUMZ-IJ+1
      
      DO 909 IOP=1,NUMX
      OPEN(UNIT=IALXO,FILE=OPECALEX(IOP),STATUS='OLD',FORM='FORMATTED')
      IZ=0
    9 READ(IALXO,1,END=707)DUMMY
      IF( DUMMY(NFMT:NFMT+6).NE.'with X=' ) GO TO 9
      READ(DUMMY,'(22X,F9.6,7X,F9.6)')XX,ZZ
      IZ=IZ+1
      IF(IZ.LT.IZ0)GOTO 9
      IF(ZZ.NE.ZZG(IJ))THEN
         WRITE(ISHORT,*)ZZ,ZZG(IJ)
         WRITE(ISHORT,*)' ALEXANDER OPACITY Z ERROR'
         WRITE(*,*)' ALEXANDER OPACITY Z ERROR'
         STOP
      END IF
      XXG(IOP,1)=XX
      read(IALXO,11,end=99) (R0GR(i,1),i=1,numd)
   11 format(//,6x,51f7.3)
      J=0
   88 READ(IALXO,12,end=99,err=77)t,(X(I),I=1,numd)
   12 FORMAT(f6.3,51f7.3)
      J=J+1
      TGR(J,1)=T
      DO 13 I=1,NUMD
         XSTO(I,J)=X(I)
   13 CONTINUE
      GOTO 88
C-----
   77 CONTINUE
      JEND=J
      IF(JEND.NE.NUMT)THEN
         WRITE(ISHORT, *)' ALEXANDER TOTAL T ERROR '
         STOP
      ENDIF
C------
      ZZSTO=ZZ
      FACT1=(ZZ0-ZZSTO)/(ZZG(IJ-1)-ZZSTO)
      FACT2=(ZZ0-ZZG(IJ-1))/(ZZSTO-ZZG(IJ-1))
      
      read(IALXO,11,end=99) (R0GR(i,1),i=1,numd)
      
      DO 888 J=1,JEND
      READ(IALXO,12,END=99,ERR=99) T,(X(I),I=1,numd)
      IF( T.NE.TGR(J,1))THEN
         WRITE(ISHORT,*)J,IT,T,TGR(J,1)
         WRITE(ISHORT,*)' ALEXANDER OPACITY T ERROR'
         STOP
      ENDIF
      DO 133 I=1,NUMD
         XSTO(I,J)=FACT1*X(I)+FACT2*XSTO(I,J)
  133 CONTINUE
  888 CONTINUE
C------
  707 CONTINUE
      CLOSE(IALXO)
      DO J=1,NUMT/2
         TEMP=TGR(NUMT-J+1,1)
         TGR(NUMT-J+1,1)=TGR(J,1)
         TGR(J,1)=TEMP
      ENDDO
      DO J=1,NUMT
         DO I=1,NUMD
            CAPPA(J+(IOP-1)*NUMT,I,1)=XSTO(I,NUMT-J+1)
         ENDDO
      ENDDO
  909 CONTINUE
C
c      DO 444 I=1,NUMD
c         R0GR(I,1)=R0+0.5*(I-1)
c  444 CONTINUE
      NUMXM(1)=NUMX
      NUMTM(1)=NUMT
      WRITE(ISHORT,*)' ALEXANDER LOW T OPACITY SET FOR Z = ',ZZ0
C
C
C
c      IF (L2Z) THEN
C DBG 12/95 second Z opacity

      do jout=2,11
c      write(*,*)' Z =',jout
      ZZ0=zpa(jout)
      DO 1111 IJ=2,NUMZ
      IF(ZZ0.LE.ZZG(IJ))GOTO 1112
 1111 CONTINUE
      IJ=NUMZ
 1112 IZ0=NUMZ-IJ+1
      
      DO 1909 IOP=1,NUMX
      OPEN(UNIT=IALXO,FILE=OPECALEX(IOP),STATUS='OLD',FORM='FORMATTED')
      IZ=0
 1009 READ(IALXO,1,END=1707)DUMMY
      IF( DUMMY(NFMT:NFMT+6).NE.'with X=' ) GO TO 1009
      READ(DUMMY,'(22X,F9.6,7X,F9.6)')XX,ZZ
      IZ=IZ+1
      IF(IZ.LT.IZ0)GOTO 1009
      IF(ZZ.NE.ZZG(IJ))THEN
         WRITE(ISHORT,*)ZZ,ZZG(IJ)
       WRITE(ISHORT,*)' ALEXANDER OPACITY Z ERROR'
       STOP
      ENDIF
      XXG(IOP,jout)=XX
      read(IALXO,11,end=99) (R0GR(i,jout),i=1,numd)
      J=0
 1088 READ(IALXO,12,END=99,ERR=1077) T,(X(I),I=1,numd)
      J=J+1
      TGR(J,jout)=T
      DO 1013 I=1,NUMD
      XSTO(I,J)=X(I)
 1013 CONTINUE
      GOTO 1088
C-----
 1077 CONTINUE
      JEND=J
      IF(JEND.NE.NUMT)THEN
       WRITE(ISHORT, *)' ALEXANDER TOTAL T ERROR (Z2)'
       STOP
      ENDIF
C------
      ZZSTO=ZZ
      FACT1=(ZZ0-ZZSTO)/(ZZG(IJ-1)-ZZSTO)
      FACT2=(ZZ0-ZZG(IJ-1))/(ZZSTO-ZZG(IJ-1))
      
      read(IALXO,11,end=99) (R0GR(i,jout),i=1,numd)
      
      DO 1888 J=1,JEND
      READ(IALXO,12,END=99,ERR=99) T,(X(I),I=1,numd)
      IF( T.NE.TGR(J,jout))THEN
       WRITE(ISHORT,*)J,IT,T,TGR(J,jout)
       WRITE(ISHORT,*)' ALEXANDER OPACITY T ERROR (Z2)'
       STOP
      ENDIF
      DO 1133 I=1,NUMD
      XSTO(I,J)=FACT1*X(I)+FACT2*XSTO(I,J)
 1133 CONTINUE
 1888 CONTINUE
C------
 1707 CONTINUE
      CLOSE(IALXO)
      DO J=1,NUMT/2
       TEMP=TGR(NUMT-J+1,jout)
       TGR(NUMT-J+1,jout)=TGR(J,jout)
       TGR(J,jout)=TEMP
      ENDDO
      DO J=1,NUMT
       DO I=1,NUMD
       CAPPA(J+(IOP-1)*NUMT,I,jout)=XSTO(I,NUMT-J+1)
       ENDDO
      ENDDO
 1909 CONTINUE
C
c      DO 1444 I=1,NUMD
c      R0GR(I,jout)=R0+0.5*(I-1)
c 1444 CONTINUE
      NUMXM(jout)=NUMX
      NUMTM(jout)=NUMT
      WRITE(ISHORT,*)' ALEXANDER LOW T OPACITY SET FOR Z2 = ',ZZ0
      enddo
c      END IF
C     END IF (L2Z)
C
      CALL YALOC
c      write(*,*)' end alxtbl'
      RETURN
   99 CLOSE(IALXO)
C      CLOSE(8)
       WRITE(ISHORT,*) ' ALEXANDER TABLE READING ERROR'
       STOP
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     YALOC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE YALOC
      IMPLICIT REAL*8 (A-H,O-Z)
      include 'dimens'
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
      LOGICAL L2Z
      DIMENSION C(4,NUMD),XD(NUMD)
      COMMON /GALOT/GRIDT(NUMT,11),GRIDX(NUMX,11),GRHOT3(NUMD,11)
      COMMON /ALOT/OPACITY(NUMXT,NUMD,11),NUMXM(11),NUMTM(11)
      COMMON /INTPAL/ CFORD(NUMXT,NUM4D,11),NDS(NUMXT,11),NDD(NUMXT,11)
c      COMMON /GALOT2/GRIDT2(NUMT),GRIDX2(NUMX),GRHOT32(NUMD)
c      COMMON /ALOT2/OPACITY2(NUMXT,NUMD),NUMXM2,NUMTM2
c      COMMON /INTPAL2/ CFORD2(NUMXT,NUM4D),NDS2(NUMXT),NDD2(NUMXT)
      COMMON /NEWOPAC/ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     +       ZOPAL952, ZALEX1, ZALEX2, ZKUR1, ZKUR2,  
     +       LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,L2Z 
      DO 101 IX=1,NUMXM(1)
      DO 102 IT=1,NUMTM(1)
       INDEX1=IT+(IX-1)*NUMTM(1)
       JD=0
        IDS=1
        IDF=NUMD
        DO ID=IDS,IDF
          CHKD=GRHOT3(ID,1)
          CHKO=OPACITY(IT+NUMT*(IX-1),ID,1)
          JD=JD+1
          XD(JD)=CHKD
          C(1,JD)=CHKO
        END DO
        NDS(INDEX1,1)=1
        NDD(INDEX1,1)=NUMD
        IF(JD.LE.1)GO TO 102
        CALL YSPLIN(XD,C,JD)
        DO J=1,JD
        DO I=1,4
         INDEX2=I+(J-1)*4
         CFORD(INDEX1,INDEX2,1)=C(I,J)
        END DO
      END DO
  102 CONTINUE
  101 CONTINUE
C
C
c      IF (L2Z) THEN
      do jout=2,11
      DO 201 IX=1,NUMXM(jout)
      DO 202 IT=1,NUMTM(jout)
       INDEX1=IT+(IX-1)*NUMTM(jout)
       JD=0
        IDS=1
        IDF=NUMD
        DO ID=IDS,IDF
          CHKD=GRHOT3(ID,jout)
          CHKO=OPACITY(IT+NUMT*(IX-1),ID,jout)
          JD=JD+1
          XD(JD)=CHKD
          C(1,JD)=CHKO
        END DO
        NDS(INDEX1,jout)=1
        NDD(INDEX1,jout)=NUMD
        IF(JD.LE.1)GO TO 202
        CALL YSPLIN(XD,C,JD)
        DO J=1,JD
        DO I=1,4
         INDEX2=I+(J-1)*4
         CFORD(INDEX1,INDEX2,jout)=C(I,J)
        END DO
      END DO
  202 CONTINUE
  201 CONTINUE
      enddo
c      END IF
C     END IF (L2Z)
      RETURN
      END
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     ALX8TH
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ALX8TH(X)
C     THIS IS THE 8TH TABLE OF THE ALEXANDER OPACITY, USED
C     TO AVOID INTERPOLATION OF X IN ENVELOPE WHERE IT DOES NOT CHANGE
      PARAMETER (NUMT=85)
      PARAMETER (NUMD=51)
      PARAMETER (NUMX=8)
      PARAMETER (NUMXT=NUMT*NUMX)
      PARAMETER (NUM4D=4*NUMD)
      IMPLICIT REAL*8 (A-H,O-Z)
      include 'dimens'
      DIMENSION C(4,NUMD)
      LOGICAL L2Z
C     LOGICAL LONE
C     OUTPUT OF AL8TH
      COMMON /ALOT4/XENV4(11),ZENV4(11),CFORD4(NUMT,NUM4D,11),KIPM1(11)
c      COMMON /ALOT42/XENV42,ZENV42,CFORD42(NUMT,NUM4D),KIPM12
C     GRIDS
      COMMON /GALOT/GRIDT(NUMT,11),GRIDX(NUMX,11),GRHOT3(NUMD,11)
c      COMMON /GALOT2/GRIDT2(NUMT),GRIDX2(NUMX),GRHOT32(NUMD)
C     ALEX OPACITY TABLES
      COMMON /ALOT/OPACITY(NUMXT,NUMD,11),NUMXM(11),NUMTM(11)
c      COMMON /ALOT2/OPACITY2(NUMXT,NUMD),NUMXM2,NUMTM2
C     THE SPLINE COEFFICIENTS AND THE SHAPE OF THE LL TABLE.
      COMMON /INTPAL/ CFORD(NUMXT,NUM4D,11),NDS(NUMXT,11),NDD(NUMXT,11)
c      COMMON /INTPAL2/ CFORD2(NUMXT,NUM4D),NDS2(NUMXT),NDD2(NUMXT)
      COMMON /NEWOPAC/ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     +       ZOPAL952, ZALEX1, ZALEX2, ZKUR1, ZKUR2,  
     +       LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,L2Z 
      COMMON/LUNUM/IOWR, ILAST, IFIRST, IRUN, ISTAND, IFERMI,
     1    ICAPPA, IOPAC, IDEBUG, ITRACK, ISHORT, IMILNE, IMODPT,
     2    ISTOR, IOPMOD, IOPENV, IOPATM, ILSTBN, ISTOBN, IDYN,
     3    IUBDAT, ILLDAT, ISNU, ISCOMP, ICOX, IKUR, IFSTBN
      common/zpoint/zp(11),zpa(11),zinit
C     KEEP THE COMPOSITION OF THE 4TH TABLE.
      XENV4(1)=X
      zpa(6)=zinit
      if(zinit.lt.0.01)then
        zpa(5)=0.004
        zpa(4)=0.002
        zpa(3)=0.001
        zpa(2)=0.0003     
        zpa(1)=0.0001     
      else
       do i=1,5
        zpa(i)=zinit-(6-i)*0.001
       enddo

      endif
      do i=7,11
        zpa(i)=zinit+(i-6)*0.001
      enddo
      
      ZENV4(1)=zpa(1)
      CALL FINDEXK(GRIDX,NUMXM,X,M1,1)
      IF(M1.LT.0)M1=-M1
      IF(M1.GE.NUMXM(1))M1=NUMXM(1)-1
      IF(M1.LE.0) THEN
         WRITE(ISHORT, *)' ERROR IN X GRID'
         STOP
      END IF
      KIPM1(1)=M1
      DO IM2=1,NUMTM(1)
        M1=KIPM1(1)
        T6=GRIDT(IM2,1)
        M2=IM2
        INDEX1=IM2+(M1-1)*NUMTM(1)
        NDSS=NDS(INDEX1,1)
        IF(NDSS.NE.1) THEN
          WRITE(ISHORT, *) ' ALX8TH CHECK NDSS '
          STOP
        END IF
        NDF=NDSS+NDD(INDEX1,1)-1
        DO IM3=NDSS,NDF
          RHOT3=GRHOT3(IM3,1)
          CALL YALO2D(T6,RHOT3,M1,M2,M3,O0,OL0,QOD0,QOT0,1)
          CALL YALO2D(T6,RHOT3,M1+1,M2,M3,O1,OL1,QOD1,QOT1,1)
          GRDNT=(X-GRIDX(M1,1))/(GRIDX(M1+1,1)-GRIDX(M1,1))
          OLF=(OL1-OL0)*GRDNT+OL0
          OF=10.0D0**OLF
          C(1,IM3)=OLF
        END DO
        CALL YSPLINK(GRHOT3,C,NDF,1)
        DO J=1,NDF
        DO I=1,4
          INDEX2=I+(J-1)*4
          CFORD4(IM2,INDEX2,1)=C(I,J)
        END DO
        END DO
      END DO
C
C
C
c      IF (L2Z) THEN

      do jout=2,11
      XENV4(jout)=X
      ZENV4(jout)=zpa(jout)
      CALL FINDEXK(GRIDX,NUMXM,X,M1,jout)
      IF(M1.LT.0)M1=-M1
      IF(M1.GE.NUMXM(jout))M1=NUMXM(jout)-1
      IF(M1.LE.0) THEN
         WRITE(ISHORT, *)' ERROR IN X GRID'
         STOP
      END IF
      KIPM1(jout)=M1
      DO IM2=1,NUMTM(jout)
        M1=KIPM1(jout)
        T6=GRIDT(IM2,jout)
        M2=IM2
        INDEX1=IM2+(M1-1)*NUMTM(jout)
        NDSS=NDS(INDEX1,jout)
        IF(NDSS.NE.1) THEN
          WRITE(ISHORT, *) ' ALX8TH Z2 CHECK NDSS '
          STOP
        END IF
        NDF=NDSS+NDD(INDEX1,jout)-1
        DO IM3=NDSS,NDF
          RHOT3=GRHOT3(IM3,jout)
          CALL YALO2D(T6,RHOT3,M1,M2,M3,O0,OL0,QOD0,QOT0,jout)
          CALL YALO2D(T6,RHOT3,M1+1,M2,M3,O1,OL1,QOD1,QOT1,jout)
          GRDNT=(X-GRIDX(M1,jout))/(GRIDX(M1+1,jout)-GRIDX(M1,jout))
          OLF=(OL1-OL0)*GRDNT+OL0
          OF=10.0D0**OLF
          C(1,IM3)=OLF
        END DO
        CALL YSPLINK(GRHOT3,C,NDF,jout)
        DO J=1,NDF
        DO I=1,4
          INDEX2=I+(J-1)*4
          CFORD4(IM2,INDEX2,jout)=C(I,J)
        END DO
        END DO
      END DO
      enddo
c      END IF
C
C
C
      RETURN
      END
